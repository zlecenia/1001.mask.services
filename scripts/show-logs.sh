#!/bin/bash
# Skrypt do wy≈õwietlania log√≥w aplikacji
# Usage: ./scripts/show-logs.sh [opcje]

set -e

# Kolory
RED='\033[31m'
GREEN='\033[32m'
YELLOW='\033[33m'
BLUE='\033[34m'
RESET='\033[0m'

# Domy≈õlne ustawienia
FOLLOW=false
LINES=50
LOG_LEVEL="all"
ENVIRONMENT="development"

# Parsowanie argument√≥w
while [[ $# -gt 0 ]]; do
    case $1 in
        -f|--follow)
            FOLLOW=true
            shift
            ;;
        -n|--lines)
            LINES="$2"
            shift 2
            ;;
        -l|--level)
            LOG_LEVEL="$2"
            shift 2
            ;;
        -e|--env)
            ENVIRONMENT="$2"
            shift 2
            ;;
        -h|--help)
            echo "Usage: $0 [opcje]"
            echo ""
            echo "Opcje:"
            echo "  -f, --follow     ≈öled≈∫ logi na ≈ºywo"
            echo "  -n, --lines N    Poka≈º ostatnie N linii (domy≈õlnie: 50)"
            echo "  -l, --level L    Filtruj po poziomie (all, error, warn, info, debug)"
            echo "  -e, --env E      ≈örodowisko (development, staging, production)"
            echo "  -h, --help       Poka≈º tƒô pomoc"
            echo ""
            echo "Przyk≈Çady:"
            echo "  $0 -f                    # ≈öled≈∫ logi na ≈ºywo"
            echo "  $0 -n 100 -l error      # Poka≈º 100 ostatnich b≈Çƒôd√≥w"
            echo "  $0 -e production         # Logi z produkcji"
            exit 0
            ;;
        *)
            echo -e "${RED}‚ùå Nieznana opcja: $1${RESET}"
            echo "U≈ºyj -h aby zobaczyƒá pomoc"
            exit 1
            ;;
    esac
done

echo -e "${BLUE}üìã Wy≈õwietlanie log√≥w aplikacji${RESET}"
echo "=================================================="
echo -e "${BLUE}≈örodowisko: $ENVIRONMENT${RESET}"
echo -e "${BLUE}Poziom log√≥w: $LOG_LEVEL${RESET}"
echo -e "${BLUE}Liczba linii: $LINES${RESET}"
echo -e "${BLUE}≈öledzenie: $([ "$FOLLOW" = true ] && echo 'TAK' || echo 'NIE')${RESET}"
echo "=================================================="

# Funkcja do kolorowania log√≥w
colorize_log() {
    while IFS= read -r line; do
        case "$line" in
            *"ERROR"*|*"error"*|*"Error"*)
                echo -e "${RED}$line${RESET}"
                ;;
            *"WARN"*|*"warn"*|*"Warning"*)
                echo -e "${YELLOW}$line${RESET}"
                ;;
            *"INFO"*|*"info"*|*"Info"*)
                echo -e "${GREEN}$line${RESET}"
                ;;
            *"DEBUG"*|*"debug"*|*"Debug"*)
                echo -e "${BLUE}$line${RESET}"
                ;;
            *)
                echo "$line"
                ;;
        esac
    done
}

# Funkcja do filtrowania po poziomie
filter_by_level() {
    if [ "$LOG_LEVEL" = "all" ]; then
        cat
    else
        case "$LOG_LEVEL" in
            error)
                grep -i "error\|err\|exception\|fail"
                ;;
            warn)
                grep -i "warn\|warning"
                ;;
            info)
                grep -i "info\|information"
                ;;
            debug)
                grep -i "debug\|trace"
                ;;
            *)
                echo -e "${RED}‚ùå Nieznany poziom log√≥w: $LOG_LEVEL${RESET}" >&2
                exit 1
                ;;
        esac
    fi
}

# ≈öcie≈ºki do plik√≥w log√≥w w zale≈ºno≈õci od ≈õrodowiska
case "$ENVIRONMENT" in
    development)
        LOG_SOURCES=(
            "npm-debug.log"
            "vite.log"
            "console.log"
            "/tmp/app-dev.log"
        )
        ;;
    staging)
        LOG_SOURCES=(
            "/var/log/app-staging.log"
            "/var/log/nginx/staging-access.log"
            "/var/log/nginx/staging-error.log"
        )
        ;;
    production)
        LOG_SOURCES=(
            "/var/log/app-production.log"
            "/var/log/nginx/production-access.log"
            "/var/log/nginx/production-error.log"
            "/var/log/syslog"
        )
        ;;
    *)
        echo -e "${RED}‚ùå Nieznane ≈õrodowisko: $ENVIRONMENT${RESET}"
        exit 1
        ;;
esac

# Sprawd≈∫ dostƒôpne ≈∫r√≥d≈Ça log√≥w
AVAILABLE_LOGS=()
for log_source in "${LOG_SOURCES[@]}"; do
    if [ -f "$log_source" ]; then
        AVAILABLE_LOGS+=("$log_source")
    fi
done

if [ ${#AVAILABLE_LOGS[@]} -eq 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Nie znaleziono plik√≥w log√≥w dla ≈õrodowiska $ENVIRONMENT${RESET}"
    echo -e "${BLUE}üí° Sprawdzane lokalizacje:${RESET}"
    for log_source in "${LOG_SOURCES[@]}"; do
        echo "  - $log_source"
    done
    
    # Sprawd≈∫ logi npm/node w bie≈ºƒÖcym katalogu
    echo ""
    echo -e "${BLUE}üîç Sprawdzanie lokalnych log√≥w...${RESET}"
    
    if [ -f "npm-debug.log" ]; then
        echo -e "${GREEN}‚úÖ Znaleziono npm-debug.log${RESET}"
        echo -e "${BLUE}üìÑ Ostatnie linie z npm-debug.log:${RESET}"
        tail -n "$LINES" npm-debug.log | filter_by_level | colorize_log
    fi
    
    # Sprawd≈∫ logi z package.json scripts
    if [ -f "package.json" ] && command -v jq >/dev/null 2>&1; then
        echo -e "${BLUE}üìã Dostƒôpne skrypty npm:${RESET}"
        jq -r '.scripts | keys[]' package.json | sed 's/^/  - npm run /'
    fi
    
    # Poka≈º logi z przeglƒÖdarki (je≈õli serwer dev jest uruchomiony)
    if pgrep -f "vite" > /dev/null; then
        echo -e "${GREEN}‚úÖ Serwer Vite jest uruchomiony${RESET}"
        echo -e "${BLUE}üí° Logi z przeglƒÖdarki sƒÖ przekazywane do terminala z serwerem dev${RESET}"
    fi
    
    exit 0
fi

echo -e "${GREEN}‚úÖ Znalezione pliki log√≥w:${RESET}"
for log_file in "${AVAILABLE_LOGS[@]}"; do
    log_size=$(du -sh "$log_file" 2>/dev/null | cut -f1)
    echo "  üìÑ $log_file ($log_size)"
done
echo ""

# Funkcja do wy≈õwietlania log√≥w
show_logs() {
    if [ "$FOLLOW" = true ]; then
        echo -e "${BLUE}üëÅÔ∏è  ≈öledzenie log√≥w na ≈ºywo (Ctrl+C aby zako≈Ñczyƒá)...${RESET}"
        echo ""
        
        # U≈ºyj tail -f dla wszystkich plik√≥w
        tail -f "${AVAILABLE_LOGS[@]}" | filter_by_level | colorize_log
    else
        echo -e "${BLUE}üìñ Ostatnie $LINES linii log√≥w:${RESET}"
        echo ""
        
        # Poka≈º ostatnie linie z wszystkich plik√≥w
        for log_file in "${AVAILABLE_LOGS[@]}"; do
            echo -e "${BLUE}=== $log_file ===${RESET}"
            tail -n "$LINES" "$log_file" | filter_by_level | colorize_log
            echo ""
        done
    fi
}

# Obs≈Çuga sygna≈Çu przerwania
trap 'echo -e "\n${BLUE}üëã Zako≈Ñczono wy≈õwietlanie log√≥w${RESET}"; exit 0' INT

# Wy≈õwietl logi
show_logs

# Je≈õli nie ≈õledzili≈õmy log√≥w, poka≈º dodatkowe informacje
if [ "$FOLLOW" = false ]; then
    echo "=================================================="
    echo -e "${BLUE}üí° Przydatne komendy:${RESET}"
    echo "  $0 -f                    # ≈öled≈∫ logi na ≈ºywo"
    echo "  $0 -n 100               # Poka≈º wiƒôcej linii"
    echo "  $0 -l error             # Tylko b≈Çƒôdy"
    echo "  make dev                 # Uruchom serwer dev z logami"
    echo ""
    echo -e "${BLUE}üìä Statystyki log√≥w:${RESET}"
    for log_file in "${AVAILABLE_LOGS[@]}"; do
        if [ -f "$log_file" ]; then
            total_lines=$(wc -l < "$log_file" 2>/dev/null || echo "0")
            error_lines=$(grep -ci "error\|err\|exception\|fail" "$log_file" 2>/dev/null || echo "0")
            warn_lines=$(grep -ci "warn\|warning" "$log_file" 2>/dev/null || echo "0")
            echo "  üìÑ $(basename "$log_file"): $total_lines linii ($error_lines b≈Çƒôd√≥w, $warn_lines ostrze≈ºe≈Ñ)"
        fi
    done
fi
