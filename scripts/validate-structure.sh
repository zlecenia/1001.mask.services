#!/bin/bash
# Skrypt do walidacji struktury projektu
# Usage: ./scripts/validate-structure.sh

set -e

# Kolory
RED='\033[31m'
GREEN='\033[32m'
YELLOW='\033[33m'
BLUE='\033[34m'
RESET='\033[0m'

# Liczniki
ERRORS=0
WARNINGS=0
CHECKS=0

echo -e "${BLUE}üîç Walidacja struktury projektu...${RESET}"
echo "=================================================="

# Funkcja do sprawdzania
check_file() {
    local file="$1"
    local description="$2"
    local required="$3"
    
    CHECKS=$((CHECKS + 1))
    
    if [ -f "$file" ]; then
        echo -e "${GREEN}‚úÖ $description${RESET}"
        return 0
    else
        if [ "$required" = "true" ]; then
            echo -e "${RED}‚ùå $description${RESET}"
            ERRORS=$((ERRORS + 1))
        else
            echo -e "${YELLOW}‚ö†Ô∏è  $description (opcjonalny)${RESET}"
            WARNINGS=$((WARNINGS + 1))
        fi
        return 1
    fi
}

check_dir() {
    local dir="$1"
    local description="$2"
    local required="$3"
    
    CHECKS=$((CHECKS + 1))
    
    if [ -d "$dir" ]; then
        echo -e "${GREEN}‚úÖ $description${RESET}"
        return 0
    else
        if [ "$required" = "true" ]; then
            echo -e "${RED}‚ùå $description${RESET}"
            ERRORS=$((ERRORS + 1))
        else
            echo -e "${YELLOW}‚ö†Ô∏è  $description (opcjonalny)${RESET}"
            WARNINGS=$((WARNINGS + 1))
        fi
        return 1
    fi
}

# Sprawd≈∫ podstawowe pliki projektu
echo -e "${BLUE}üìÅ Sprawdzanie podstawowych plik√≥w...${RESET}"
check_file "package.json" "package.json istnieje" "true"
check_file "vite.config.js" "vite.config.js istnieje" "true"
check_file "index.html" "index.html istnieje" "true"
check_file "Makefile" "Makefile istnieje" "true"
check_file "README.md" "README.md istnieje" "false"
check_file ".gitignore" ".gitignore istnieje" "false"

echo ""

# Sprawd≈∫ strukturƒô katalog√≥w
echo -e "${BLUE}üìÇ Sprawdzanie struktury katalog√≥w...${RESET}"
check_dir "js" "Katalog js/ istnieje" "true"
check_dir "js/features" "Katalog js/features/ istnieje" "true"
check_dir "js/services" "Katalog js/services/ istnieje" "true"
check_dir "scripts" "Katalog scripts/ istnieje" "true"
check_dir "docs" "Katalog docs/ istnieje" "false"
check_dir "dist" "Katalog dist/ istnieje (build)" "false"

echo ""

# Sprawd≈∫ skrypty
echo -e "${BLUE}üîß Sprawdzanie skrypt√≥w...${RESET}"
check_file "scripts/test-modules.sh" "Skrypt test-modules.sh" "true"
check_file "scripts/test-single-module.sh" "Skrypt test-single-module.sh" "true"
check_file "scripts/analyze-modules.py" "Skrypt analyze-modules.py" "true"
check_file "scripts/generate-docs.sh" "Skrypt generate-docs.sh" "true"

# Sprawd≈∫ uprawnienia skrypt√≥w
if [ -f "scripts/test-modules.sh" ]; then
    if [ -x "scripts/test-modules.sh" ]; then
        echo -e "${GREEN}‚úÖ Skrypt test-modules.sh ma uprawnienia wykonywania${RESET}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Skrypt test-modules.sh nie ma uprawnie≈Ñ wykonywania${RESET}"
        WARNINGS=$((WARNINGS + 1))
    fi
    CHECKS=$((CHECKS + 1))
fi

echo ""

# Sprawd≈∫ modu≈Çy
echo -e "${BLUE}üì¶ Sprawdzanie modu≈Ç√≥w...${RESET}"
MODULES=$(find js/features -name "index.js" -type f 2>/dev/null | sed 's|/index.js||' | sed 's|js/features/||' | sort)

if [ -z "$MODULES" ]; then
    echo -e "${RED}‚ùå Nie znaleziono ≈ºadnych modu≈Ç√≥w${RESET}"
    ERRORS=$((ERRORS + 1))
else
    MODULE_COUNT=$(echo "$MODULES" | wc -l)
    echo -e "${GREEN}‚úÖ Znaleziono $MODULE_COUNT modu≈Ç√≥w${RESET}"
    
    # Sprawd≈∫ ka≈ºdy modu≈Ç
    for MODULE_PATH in $MODULES; do
        MODULE_NAME=$(basename "$MODULE_PATH")
        FULL_PATH="js/features/$MODULE_PATH"
        
        echo -e "${BLUE}  üì¶ Sprawdzanie modu≈Çu: $MODULE_NAME${RESET}"
        
        # Sprawd≈∫ wymagane pliki modu≈Çu
        check_file "$FULL_PATH/index.js" "    index.js w $MODULE_NAME" "true"
        
        # Sprawd≈∫ pliki opcjonalne
        check_file "$FULL_PATH/README.md" "    README.md w $MODULE_NAME" "false"
        check_file "$FULL_PATH/config.json" "    config.json w $MODULE_NAME" "false"
        
        # Sprawd≈∫ testy
        TEST_FILES=$(find "$FULL_PATH" -name "*.test.js" -type f 2>/dev/null)
        if [ -n "$TEST_FILES" ]; then
            TEST_COUNT=$(echo "$TEST_FILES" | wc -l)
            echo -e "${GREEN}    ‚úÖ $TEST_COUNT plik√≥w testowych w $MODULE_NAME${RESET}"
        else
            echo -e "${YELLOW}    ‚ö†Ô∏è  Brak test√≥w w $MODULE_NAME${RESET}"
            WARNINGS=$((WARNINGS + 1))
        fi
        CHECKS=$((CHECKS + 1))
    done
fi

echo ""

# Sprawd≈∫ package.json
echo -e "${BLUE}üìã Sprawdzanie package.json...${RESET}"
if [ -f "package.json" ]; then
    # Sprawd≈∫ czy zawiera wymagane pola
    if command -v jq >/dev/null 2>&1; then
        NAME=$(jq -r '.name // empty' package.json)
        VERSION=$(jq -r '.version // empty' package.json)
        SCRIPTS=$(jq -r '.scripts // empty' package.json)
        
        if [ -n "$NAME" ]; then
            echo -e "${GREEN}‚úÖ package.json zawiera nazwƒô: $NAME${RESET}"
        else
            echo -e "${RED}‚ùå package.json nie zawiera nazwy${RESET}"
            ERRORS=$((ERRORS + 1))
        fi
        
        if [ -n "$VERSION" ]; then
            echo -e "${GREEN}‚úÖ package.json zawiera wersjƒô: $VERSION${RESET}"
        else
            echo -e "${RED}‚ùå package.json nie zawiera wersji${RESET}"
            ERRORS=$((ERRORS + 1))
        fi
        
        if [ "$SCRIPTS" != "null" ] && [ -n "$SCRIPTS" ]; then
            echo -e "${GREEN}‚úÖ package.json zawiera skrypty${RESET}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  package.json nie zawiera skrypt√≥w${RESET}"
            WARNINGS=$((WARNINGS + 1))
        fi
        
        CHECKS=$((CHECKS + 3))
    else
        echo -e "${YELLOW}‚ö†Ô∏è  jq nie jest zainstalowane - pominiƒôto szczeg√≥≈ÇowƒÖ walidacjƒô package.json${RESET}"
        WARNINGS=$((WARNINGS + 1))
        CHECKS=$((CHECKS + 1))
    fi
fi

echo ""

# Sprawd≈∫ node_modules
echo -e "${BLUE}üìö Sprawdzanie zale≈ºno≈õci...${RESET}"
if [ -d "node_modules" ]; then
    NODE_MODULES_SIZE=$(du -sh node_modules 2>/dev/null | cut -f1)
    echo -e "${GREEN}‚úÖ node_modules istnieje ($NODE_MODULES_SIZE)${RESET}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  node_modules nie istnieje - uruchom 'make install'${RESET}"
    WARNINGS=$((WARNINGS + 1))
fi
CHECKS=$((CHECKS + 1))

# Sprawd≈∫ pliki konfiguracyjne
echo ""
echo -e "${BLUE}‚öôÔ∏è  Sprawdzanie konfiguracji...${RESET}"
check_file "vite.config.js" "Konfiguracja Vite" "true"

if [ -f "vite.config.js" ]; then
    # Sprawd≈∫ czy zawiera podstawowƒÖ konfiguracjƒô
    if grep -q "defineConfig" vite.config.js; then
        echo -e "${GREEN}‚úÖ vite.config.js u≈ºywa defineConfig${RESET}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  vite.config.js nie u≈ºywa defineConfig${RESET}"
        WARNINGS=$((WARNINGS + 1))
    fi
    CHECKS=$((CHECKS + 1))
fi

# Podsumowanie
echo ""
echo "=================================================="
echo -e "${BLUE}üìä PODSUMOWANIE WALIDACJI${RESET}"
echo "=================================================="

echo "≈ÅƒÖczna liczba sprawdze≈Ñ: $CHECKS"
echo -e "B≈Çƒôdy: ${RED}$ERRORS${RESET}"
echo -e "Ostrze≈ºenia: ${YELLOW}$WARNINGS${RESET}"
echo -e "Pomy≈õlne: ${GREEN}$((CHECKS - ERRORS - WARNINGS))${RESET}"

if [ $ERRORS -eq 0 ] && [ $WARNINGS -eq 0 ]; then
    echo -e "\n${GREEN}üéâ Struktura projektu jest prawid≈Çowa!${RESET}"
    exit 0
elif [ $ERRORS -eq 0 ]; then
    echo -e "\n${YELLOW}‚ö†Ô∏è  Struktura projektu jest w porzƒÖdku, ale sƒÖ ostrze≈ºenia${RESET}"
    exit 0
else
    echo -e "\n${RED}‚ùå Znaleziono b≈Çƒôdy w strukturze projektu${RESET}"
    echo -e "${BLUE}üí° Rekomendacje:${RESET}"
    
    if [ $ERRORS -gt 0 ]; then
        echo "  ‚Ä¢ Napraw b≈Çƒôdy oznaczone ‚ùå"
    fi
    if [ $WARNINGS -gt 0 ]; then
        echo "  ‚Ä¢ Rozwa≈º naprawienie ostrze≈ºe≈Ñ oznaczonych ‚ö†Ô∏è"
    fi
    
    exit 1
fi
